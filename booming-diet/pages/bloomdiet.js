"use client";

import { useState } from "react";
import Head from "next/head";
import styles from "@/styles/BloomDiet.module.css";

export default function BloomDietPage() {
  const [gender, setGender] = useState("");
  const [age, setAge] = useState("");
  const [height, setHeight] = useState("");
  const [weight, setWeight] = useState("");
  const [disease, setDisease] = useState("None");
  const [allergies, setAllergies] = useState("None");
  const [exerciseHours, setExerciseHours] = useState("");
  const [loading, setLoading] = useState(false);
  const [prediction, setPrediction] = useState(null);      // string ‡∏´‡∏£‡∏∑‡∏≠ object ‡∏Å‡πá‡πÑ‡∏î‡πâ
  const [probabilities, setProbabilities] = useState(null); // object
  const [error, setError] = useState("");

  const yearNow = new Date().getFullYear();

  const calcBMI = (h, w) => {
    const heightNum = Number(h);
    const weightNum = Number(w);
    if (!heightNum || !weightNum) return null;
    const bmi = weightNum / ((heightNum / 100) ** 2);
    return Number(bmi.toFixed(2));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);
    setPrediction(null);
    setProbabilities(null);

    const bmi = calcBMI(height, weight);

    try {
      const res = await fetch("/api/predict-one", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          data: {
            gender,
            age: Number(age) || null,
            height_cm: Number(height) || null,
            weight_kg: Number(weight) || null,
            bmi,
            disease,
            allergies,
            exercise_hours: Number(exerciseHours) || 0,
          },
        }),
      });

      if (!res.ok) throw new Error("HTTP " + res.status);
      const json = await res.json();

      setPrediction(json.prediction ?? "‚Äî");
      setProbabilities(json.probabilities ?? null);
    } catch (err) {
      setError(`Failed to fetch: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>BloomDiet ‚Äì ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û & AI ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</title>
        {/* ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå Prompt (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ) */}
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
        <link
          href="https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap"
          rel="stylesheet"
        />
      </Head>

      <div className={styles.page}>
        <div className={styles.container}>
          <h1 className={styles.title}>üå∏ BloomDiet</h1>
          <p className={styles.subtitle}>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å AI</p>

          <form onSubmit={handleSubmit}>
            {/* ‡πÄ‡∏û‡∏® */}
            <label className={styles.label}>‡πÄ‡∏û‡∏®</label>
            <select
              className={styles.select}
              value={gender}
              onChange={(e) => setGender(e.target.value)}
            >
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
              <option value="Male">‡∏ä‡∏≤‡∏¢</option>
              <option value="Female">‡∏´‡∏ç‡∏¥‡∏á</option>
            </select>

            {/* ‡∏≠‡∏≤‡∏¢‡∏∏ */}
            <label className={styles.label}>‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)</label>
            <input
              type="number"
              min="1"
              max="120"
              className={styles.input}
              value={age}
              onChange={(e) => setAge(e.target.value)}
            />

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á */}
            <label className={styles.label}>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)</label>
            <input
              type="number"
              min="100"
              max="250"
              className={styles.input}
              value={height}
              onChange={(e) => setHeight(e.target.value)}
            />

            {/* ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å */}
            <label className={styles.label}>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)</label>
            <input
              type="number"
              min="20"
              max="300"
              className={styles.input}
              value={weight}
              onChange={(e) => setWeight(e.target.value)}
            />

            {/* ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß */}
            <label className={styles.label}>‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß</label>
            <select
              className={styles.select}
              value={disease}
              onChange={(e) => setDisease(e.target.value)}
            >
              <option value="None">‡πÑ‡∏°‡πà‡∏°‡∏µ</option>
              <option value="Diabetes">‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô</option>
              <option value="Hypertension">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á</option>
              <option value="Heart">‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à</option>
              <option value="Obesity">‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô</option>
            </select>

            {/* ‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
            <label className={styles.label}>‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£</label>
            <select
              className={styles.select}
              value={allergies}
              onChange={(e) => setAllergies(e.target.value)}
            >
              <option value="None">‡πÑ‡∏°‡πà‡∏°‡∏µ</option>
              <option value="Gluten">Gluten</option>
              <option value="Dairy">‡∏ô‡∏°</option>
              <option value="Nuts">‡∏ñ‡∏±‡πà‡∏ß</option>
              <option value="Seafood">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•</option>
              <option value="Eggs">‡πÑ‡∏Ç‡πà</option>
            </select>

            {/* ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ */}
            <label className={styles.label}>‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</label>
            <input
              type="number"
              step="0.5"
              min="0"
              max="50"
              className={styles.input}
              value={exerciseHours}
              onChange={(e) => setExerciseHours(e.target.value)}
            />

            <button type="submit" className={styles.button} disabled={loading}>
              {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢..." : "‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏ß‡∏¢ AI üçΩÔ∏è"}
            </button>
          </form>

          {/* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
          <div className={styles.result}>
            {error && <div className={styles.error}>‚ùå {error}</div>}

            {!error && prediction && (
              <>
                <div className={styles.pred}>
                  ‚úÖ <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {String(prediction)}
                </div>
                {probabilities && (
                  <pre className={styles.pre}>
{JSON.stringify(probabilities, null, 2)}
                  </pre>
                )}
              </>
            )}
          </div>

          <div className={styles.footer}>¬© {yearNow} BloomDiet</div>
        </div>
      </div>
    </>
  );
}
