"use client";

import { useState, useRef } from "react";
import Head from "next/head";
import styles from "@/styles/BloomDiet.module.css";

export default function BloomDietPage() {
  const [gender, setGender] = useState("");
  const [age, setAge] = useState("");
  const [height, setHeight] = useState("");
  const [weight, setWeight] = useState("");
  const [disease, setDisease] = useState("None");
  const [allergies, setAllergies] = useState("None");
  const [exerciseHours, setExerciseHours] = useState("");

  const [loading, setLoading] = useState(false);
  const [prediction, setPrediction] = useState(null);
  const [error, setError] = useState("");

  // refs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î/‡∏ß‡πà‡∏≤‡∏á
  const genderRef = useRef(null);
  const ageRef = useRef(null);
  const heightRef = useRef(null);
  const weightRef = useRef(null);
  const exerciseRef = useRef(null); // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° ref

  const yearNow = new Date().getFullYear();

  const calcBMI = (h, w) => {
    const heightNum = Number(h);
    const weightNum = Number(w);
    if (!heightNum || !weightNum) return null;
    const bmi = weightNum / ((heightNum / 100) ** 2);
    return Number(bmi.toFixed(2));
  };

  // helper: focus + scroll + ‡πÉ‡∏ä‡πâ native validity tooltip
  const jumpTo = (ref, msg) => {
    const el = ref?.current;
    if (!el) return;
    el.scrollIntoView({ behavior: "smooth", block: "center" });
    el.focus({ preventScroll: true });
    if (el.setCustomValidity) {
      el.setCustomValidity(msg);
      el.reportValidity();
      setTimeout(() => el.setCustomValidity(""), 2000);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setPrediction(null);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
    if (!gender) return jumpTo(genderRef, "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®");

    const ageNum = Number(age);
    if (!age) return jumpTo(ageRef, "‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏");
    if (Number.isNaN(ageNum) || ageNum < 1 || ageNum > 120)
      return jumpTo(ageRef, "‡∏≠‡∏≤‡∏¢‡∏∏‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1‚Äì120 ‡∏õ‡∏µ");

    const heightNum = Number(height);
    if (!height) return jumpTo(heightRef, "‡∏Å‡∏£‡∏≠‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á");
    // if (Number.isNaN(heightNum) || heightNum < 100 || heightNum > 250)
    //   return jumpTo(heightRef, "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 100‚Äì250 ‡∏ã‡∏°.");

    const weightNum = Number(weight);
    if (!weight) return jumpTo(weightRef, "‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å");
    // if (Number.isNaN(weightNum) || weightNum < 20 || weightNum > 300)
    //   return jumpTo(weightRef, "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 20‚Äì300 ‡∏Å‡∏Å.");

    // ‚¨áÔ∏è ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢
    const exNum = Number(exerciseHours);
    if (exerciseHours === "") return jumpTo(exerciseRef, "‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå");
    // if (Number.isNaN(exNum) || exNum < 0 || exNum > 50)
    //   return jumpTo(exerciseRef, "‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0‚Äì50 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");

    setLoading(true);
    const bmi = calcBMI(heightNum, weightNum);

    try {
      const res = await fetch("/api/predict-one", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          data: {
            gender,
            age: ageNum,
            height_cm: heightNum,
            weight_kg: weightNum,
            bmi,
            disease,
            allergies,
            exercise_hours: exNum, // ‚¨ÖÔ∏è ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß
          },
        }),
      });

      if (!res.ok) {
        const msg = await res.text();
        throw new Error(`HTTP ${res.status} ${msg}`);
      }
      const json = await res.json();
      setPrediction(json?.prediction ?? "‚Äî");
    } catch (err) {
      setError(`Failed to fetch: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>BloomDiet ‚Äì ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û & AI ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£</title>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="" />
        <link
          href="https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap"
          rel="stylesheet"
        />
      </Head>

      <div className={styles.page}>
        <div className={styles.container}>
          <h1 className={styles.title}>üå∏ BloomDiet</h1>
          <p className={styles.subtitle}>‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å AI</p>

          <form onSubmit={handleSubmit} noValidate>
            {/* ‡πÄ‡∏û‡∏® */}
            <label className={styles.label}>‡πÄ‡∏û‡∏®</label>
            <select
              ref={genderRef}
              className={styles.select}
              value={gender}
              onChange={(e) => setGender(e.target.value)}
            >
              <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
              <option value="Male">‡∏ä‡∏≤‡∏¢</option>
              <option value="Female">‡∏´‡∏ç‡∏¥‡∏á</option>
            </select>

            {/* ‡∏≠‡∏≤‡∏¢‡∏∏ */}
            <label className={styles.label}>‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)</label>
            <input
              ref={ageRef}
              type="number"
              min="1"
              max="120"
              className={styles.input}
              value={age}
              onChange={(e) => setAge(e.target.value)}
            />

            {/* ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á */}
            <label className={styles.label}>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)</label>
            <input
              ref={heightRef}
              type="number"
              min="100"
              max="250"
              className={styles.input}
              value={height}
              onChange={(e) => setHeight(e.target.value)}
            />

            {/* ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å */}
            <label className={styles.label}>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)</label>
            <input
              ref={weightRef}
              type="number"
              min="20"
              max="300"
              className={styles.input}
              value={weight}
              onChange={(e) => setWeight(e.target.value)}
            />

            {/* ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß */}
            <label className={styles.label}>‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß</label>
            <select
              className={styles.select}
              value={disease}
              onChange={(e) => setDisease(e.target.value)}
            >
              <option value="None">‡πÑ‡∏°‡πà‡∏°‡∏µ</option>
              <option value="Diabetes">‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô</option>
              <option value="Hypertension">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á</option>
              <option value="Heart">‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à</option>
              <option value="Obesity">‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô</option>
            </select>

            {/* ‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
            <label className={styles.label}>‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£</label>
            <select
              className={styles.select}
              value={allergies}
              onChange={(e) => setAllergies(e.target.value)}
            >
              <option value="None">‡πÑ‡∏°‡πà‡∏°‡∏µ</option>
              <option value="Gluten">Gluten</option>
              <option value="Dairy">‡∏ô‡∏°</option>
              <option value="Nuts">‡∏ñ‡∏±‡πà‡∏ß</option>
              <option value="Seafood">‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•</option>
              <option value="Eggs">‡πÑ‡∏Ç‡πà</option>
            </select>

            {/* ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ */}
            <label className={styles.label}>‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</label>
            <input
              ref={exerciseRef}
              type="number"
              step="0.5"
              min="0"
              max="50"
              className={styles.input}
              value={exerciseHours}
              onChange={(e) => setExerciseHours(e.target.value)}
            />

            <button type="submit" className={styles.button} disabled={loading}>
              {loading ? "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢..." : "‡∏Ç‡∏≠‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏ß‡∏¢ AI üçΩÔ∏è"}
            </button>
          </form>

          <div className={styles.result}>
            {error && <div className={styles.error}>‚ùå {error}</div>}
            {!error && prediction && (
              <div className={styles.pred}>
                ‚úÖ <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {String(prediction)}
              </div>
            )}
          </div>

          <div className={styles.footer}>¬© {yearNow} BloomDiet</div>
        </div>
      </div>
    </>
  );
}
